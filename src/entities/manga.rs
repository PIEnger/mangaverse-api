//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "manga")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub manga_id: String,
    pub linked_id: String,
    pub is_listed: i8,
    pub name: String,
    pub cover_url: String,
    #[sea_orm(unique)]
    pub url: Option<String>,
    pub last_updated: Option<DateTime>,
    pub status: String,
    pub is_main: Option<i8>,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub source_id: String,
    pub last_watch_time: Option<i64>,
    pub public_id: String,
    pub is_old: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::source::Entity",
        from = "Column::SourceId",
        to = "super::source::Column::SourceId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Source,
    #[sea_orm(has_many = "super::chapter::Entity")]
    Chapter,
    #[sea_orm(has_many = "super::manga_author::Entity")]
    MangaAuthor,
    #[sea_orm(has_many = "super::manga_genre::Entity")]
    MangaGenre,
}

impl Related<super::source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Source.def()
    }
}

impl Related<super::chapter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chapter.def()
    }
}

impl Related<super::manga_author::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MangaAuthor.def()
    }
}

impl Related<super::manga_genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MangaGenre.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
